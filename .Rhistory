b <- 30 - m * 98
paste0("y = ", round(m, 2), "x ", round(b, 2))
# Lower Limit
m <- (8 - 26) / (116 - 98)
b <- 26 - m * 98
paste0("y = ", round(m, 2), "x + ", round(b, 2))
# Barrel
rhp <- rhp %>%
mutate(Barrel = is.barrel(LA = launch_angle, EV = launch_speed))
# Strike
rhp <- rhp %>%
mutate(STRIKE = ifelse(description  %in% c("called_strike", "swinging_strike",
"foul_tip", "bunt_foul_tip", "foul_bunt",
"swinging_strike_blocked", "missed_bunt"),
1, 0))
# Batter Whiff
batter_stats <- rhp %>%
summarize(rate = mean(whiff),
pitches = n(),
.by = c(batter, pitch_type)) %>%
mutate(pitch_whiff = weighted.mean(rate, pitches),
.by = pitch_type) %>%
mutate(pred_bwhiff = (pitches / 300)*rate + ((300-pitches)/300)*pitch_whiff) %>%
mutate(pred_bwhiff = ifelse(pitches >= 300, rate, pred_bwhiff))
# Merging Whiff Prediction with RHP
rhp <- rhp %>%
left_join(select(batter_stats, batter, pitch_type, pred_bwhiff),
by = c("batter" = "batter", "pitch_type" = "pitch_type"))
rhp <- rhp %>%
mutate(prev_pitch = ifelse(is.na(prev_pitch), "None", prev_pitch)) %>%
mutate(Count = paste0(balls, "-", strikes)) %>%
mutate(Count = as.factor(Count))
# Barrel
batter_stats2 <- rhp %>%
summarize(rate = mean(Barrel),
pitches = n(),
.by = c(batter, pitch_type)) %>%
mutate(pitch_barrel = weighted.mean(rate, pitches),
.by = pitch_type) %>%
mutate(pred_bbarrel = (pitches / 300)*rate + ((300-pitches)/300)*pitch_barrel) %>%
mutate(pred_bbarrel = ifelse(pitches >= 300, rate, pred_bbarrel))
rhp <- rhp %>%
left_join(select(batter_stats2, batter, pitch_type, pred_bbarrel),
by = c("batter" = "batter", "pitch_type" = "pitch_type"))
sliders <- rhp %>%
filter(hitter == "R") %>%
filter(pitch_type == "SL") %>%
mutate(count = paste0(balls, "_", strikes),
prev_pitch = as.factor(prev_pitch)) %>%
mutate(prev_pitch_ff = ifelse(prev_pitch == "FF", 1, 0))
fastballs <- rhp %>%
filter(hitter == "R") %>%
filter(pitch_type == fb_type) %>%
mutate(count = paste0(balls, "_", strikes),
prev_pitch = as.factor(prev_pitch))
# Refined Model
sl_model_whiff <- glm(whiff ~ pitch_speed + pfx_x + pfx_z + plate_x + plate_z + zone +
pfx_total + speed_change + break_change + prev_pitch +
speed_fb_diff + release_spin_rate +
I(plate_z^2) + pred_bwhiff,
data = sliders, family = binomial)
# Model Evaluation
summary(sl_model_whiff)
sl_whiff <- augment(sl_model_whiff)
sl_whiff <- sl_whiff %>%
mutate(prediction_log = predict(sl_model_whiff, sl_whiff),
prediction = 1 / (1 + exp(-prediction_log)),
rounded_pred = case_when(
prediction >= 0.5 ~ 1,
prediction < 0.5 ~ 0
)) %>%
filter(!is.na(prediction)) %>%
mutate(Response = "whiff",
pitch = "slider")
# Refined Model
fb_model_whiff <- glm(whiff ~ pitch_speed + pfx_x + pfx_z + plate_x + plate_z + zone +
pfx_total + speed_change + break_change + prev_pitch +
release_spin_rate + I(plate_x^2) + I(plate_z^2) + pred_bwhiff,
data = fastballs, family = binomial)
# Model Evaluation
summary(fb_model_whiff)
fb_whiff <- augment(fb_model_whiff)
fb_whiff <- fb_whiff %>%
mutate(prediction_log = predict(fb_model_whiff, fb_whiff),
prediction = 1 / (1 + exp(-prediction_log)),
rounded_pred = case_when(
prediction >= 0.5 ~ 1,
prediction < 0.5 ~ 0
)) %>%
filter(!is.na(prediction)) %>%
mutate(Response = "whiff",
pitch = "fastball")
# Refined Model
sl_model_barrel <- glm(Barrel ~ pitch_speed + plate_z + plate_x +
prev_pitch + speed_fb_diff + I(plate_x^2) + I(plate_z^2) + pred_bbarrel,
data = sliders, family = binomial)
# Model Evaluation
summary(sl_model_barrel)
sl_barrel <- augment(sl_model_barrel)
sl_barrel <- sl_barrel %>%
mutate(prediction_log = predict(sl_model_barrel, sl_barrel),
prediction = 1 / (1 + exp(-prediction_log)),
rounded_pred = case_when(
prediction >= 0.5 ~ 1,
prediction < 0.5 ~ 0
)) %>%
filter(!is.na(prediction)) %>%
mutate(Response = "barrel",
pitch = "slider")
# Refined Model
fb_model_barrel <- glm(Barrel ~ pitch_speed + pfx_z + plate_z +
break_change + prev_pitch + plate_x +
release_spin_rate + I(plate_x^2) + I(plate_z^2) + pred_bbarrel,
data = fastballs, family = binomial)
# Model Evaluation
summary(fb_model_barrel)
fb_barrel <- augment(fb_model_barrel)
fb_barrel <- fb_barrel %>%
mutate(prediction_log = predict(fb_model_barrel, fb_barrel),
prediction = 1 / (1 + exp(-prediction_log)),
rounded_pred = case_when(
prediction >= 0.5 ~ 1,
prediction < 0.5 ~ 0
)) %>%
filter(!is.na(prediction)) %>%
mutate(Response = "barrel",
pitch = "fastball")
# No Zone in Fastball?
summarize(fastballs, b = mean(Barrel), d = mean(distance), .by = zone) %>%
arrange(desc(b))
summarize(fastballs, b = mean(Barrel), d = mean(distance), .by = zone) %>%
arrange(desc(b)) %>%
with(cor(d, b))
# Refined Model
sliders <- sliders %>%
mutate(fb_prev = ifelse(prev_pitch == "Fastball", 1, 0)) %>%
mutate(count_s = case_when(count  %in% c("0_0", "1_1", "2_2") ~ "Even",
count  %in%  c("1_0", "2_1", "2_0", "3_0", "3_1") ~ "Hitter",
count %in%  c("0_1", "0_2", "1_2") ~ "Pitcher",
count == "3_2" ~ "Full"))
sl_model_strike <- glm(STRIKE ~ pfx_x + pfx_z + plate_x + plate_z + zone +
count_s + pfx_total + break_change + distance + prev_pitch +
speed_fb_diff + release_spin_rate +
I(plate_x^2) + I(plate_z^2),
data = sliders, family = binomial)
# Model Evaluation
summary(sl_model_strike)
sl_strike <- augment(sl_model_strike)
sl_strike <- sl_strike %>%
mutate(prediction_log = predict(sl_model_strike, sl_strike),
prediction = 1 / (1 + exp(-prediction_log)),
rounded_pred = case_when(
prediction >= 0.5 ~ 1,
prediction < 0.5 ~ 0
)) %>%
filter(!is.na(prediction)) %>%
mutate(Response = "strike",
pitch = "slider")
# Refined Model
fb_model_strike <- glm(STRIKE ~ pitch_speed + pfx_x + pfx_z + plate_x + plate_z + zone +
count + pfx_total + break_change + distance +
release_spin_rate + I(plate_x^2) + I(plate_z^2),
data = fastballs, family = binomial)
# Model Evaluation
summary(fb_model_strike)
fb_strike <- augment(fb_model_strike)
fb_strike <- fb_strike %>%
mutate(prediction_log = predict(fb_model_strike, fb_strike),
prediction = 1 / (1 + exp(-prediction_log)),
rounded_pred = case_when(
prediction >= 0.5 ~ 1,
prediction < 0.5 ~ 0
)) %>%
filter(!is.na(prediction)) %>%
mutate(Response = "strike",
pitch = "fastball")
## Intercept-Only Models
# Slider
sl_model_whiff_int <- glm(whiff ~ 1,
data = sliders, family = binomial)
sl_whiff_int <- augment(sl_model_whiff_int)
sl_whiff_int <- sl_whiff_int %>%
mutate(prediction_log = predict(sl_model_whiff_int, sl_whiff_int),
prediction = 1 / (1 + exp(-prediction_log)),
rounded_pred = case_when(
prediction >= 0.5 ~ 1,
prediction < 0.5 ~ 0
)) %>%
filter(!is.na(prediction)) %>%
mutate(Response = "whiff",
pitch = "slider",
type = "intercept only")
# Fastball
fb_model_whiff_int <- glm(whiff ~ 1,
data = fastballs, family = binomial)
fb_whiff_int <- augment(fb_model_whiff_int)
fb_whiff_int <- fb_whiff_int %>%
mutate(prediction_log = predict(fb_model_whiff_int, fb_whiff_int),
prediction = 1 / (1 + exp(-prediction_log)),
rounded_pred = case_when(
prediction >= 0.5 ~ 1,
prediction < 0.5 ~ 0
)) %>%
filter(!is.na(prediction)) %>%
mutate(Response = "whiff",
pitch = "fastball",
type = "intercept only")
## Zone-Only Models
# Slider
sl_model_whiff_zone <- glm(whiff ~ zone,
data = sliders, family = binomial)
sl_whiff_zone <- augment(sl_model_whiff_zone)
sl_whiff_zone <- sl_whiff_zone %>%
mutate(prediction_log = predict(sl_model_whiff_zone, sl_whiff_zone),
prediction = 1 / (1 + exp(-prediction_log)),
rounded_pred = case_when(
prediction >= 0.5 ~ 1,
prediction < 0.5 ~ 0
)) %>%
filter(!is.na(prediction)) %>%
mutate(Response = "whiff",
pitch = "slider",
type = "zone only")
# Fastball
fb_model_whiff_zone <- glm(whiff ~ zone,
data = fastballs, family = binomial)
fb_whiff_zone <- augment(fb_model_whiff_zone)
fb_whiff_zone <- fb_whiff_zone %>%
mutate(prediction_log = predict(fb_model_whiff_zone, fb_whiff_zone),
prediction = 1 / (1 + exp(-prediction_log)),
rounded_pred = case_when(
prediction >= 0.5 ~ 1,
prediction < 0.5 ~ 0
)) %>%
filter(!is.na(prediction)) %>%
mutate(Response = "whiff",
pitch = "fastball",
type = "zone only")
all_models_data <- bind_rows(
sl_whiff, fb_whiff,
sl_barrel, fb_barrel,
sl_strike, fb_strike,
sl_whiff_int, fb_whiff_int,
sl_whiff_zone, fb_whiff_zone) %>%
select(Response:pitch, type, whiff:pred_bwhiff, `I(plate_x^2)`:count, `.fitted`:rounded_pred)
all_models <- bind_rows(
tidy(sl_model_whiff) %>% mutate(Response = "whiff", pitch = "slider", type = "complex"),
tidy(fb_model_whiff) %>% mutate(Response = "whiff", pitch = "fastball", type = "complex"),
tidy(sl_model_barrel) %>% mutate(Response = "barrel", pitch = "slider", type = "complex"),
tidy(fb_model_barrel) %>% mutate(Response = "barrel", pitch = "fastball", type = "complex"),
tidy(sl_model_strike) %>% mutate(Response = "strike", pitch = "slider", type = "complex"),
tidy(fb_model_strike) %>% mutate(Response = "strike", pitch = "fastball", type = "complex"),
tidy(sl_model_whiff_int) %>% mutate(Response = "whiff", pitch = "slider",
type = "intercept only"),
tidy(fb_model_whiff_int) %>% mutate(Response = "whiff", pitch = "fastball",
type = "intercept only"),
tidy(sl_model_whiff_zone) %>% mutate(Response = "whiff", pitch = "slider",
type = "zone only"),
tidy(fb_model_whiff_zone) %>% mutate(Response = "whiff", pitch = "fastball",
type = "zone only")
)
all_models_data$type <- all_models_data$type %>%
replace_na("complex")
# P-Value
all_models %>%
filter(type == "complex") %>%
mutate(model_id = paste0(Response, pitch, type)) %>%
group_by(model_id) %>%
ggplot(aes(x = Response, y = term, fill = p.value)) +
geom_tile() +
facet_wrap(~ pitch) +
scale_fill_gradient(limits = c(0, 0.05),
low = "green", high = "yellow", na.value = "lightgray") +
theme_classic() +
NULL
# Estimate
all_models %>%
filter(type == "complex") %>%
mutate(model_id = paste0(Response, pitch, type)) %>%
group_by(model_id) %>%
ggplot(aes(x = Response, y = term, fill = estimate)) +
geom_tile() +
facet_wrap(~ pitch) +
scale_fill_brewer(type = "div") +
scale_fill_gradient2(low = "red", high = "green", mid = "white", midpoint = 0,
limits = c(-10, 10)) +
theme_classic() +
NULL
# Log Estimate
all_models %>%
filter(type == "complex") %>%
mutate(log_estimate = log(abs(estimate))*(estimate/abs(estimate))) %>%
mutate(model_id = paste0(Response, pitch, type)) %>%
group_by(model_id) %>%
ggplot(aes(x = Response, y = term, fill = log_estimate)) +
geom_tile() +
facet_wrap(~ pitch) +
scale_fill_brewer(type = "div") +
scale_fill_gradient2(low = "red", high = "green", mid = "white", midpoint = 0) +
theme_classic() +
NULL
rhp <- read_csv("CSVs/rhp_pitches.csv") %>%
select(-...1)
lhp <- read_csv("CSVs/lhp_pitches.csv") %>%
select(-...1)
data <- rbind(rhp, lhp)
data %>%
mutate(pitch_speed = round(pitch_speed, 0)) %>%
group_by(p_throws, hitter, pitch_type, pitch_speed) %>%
filter(!is.na(pfx_x)) %>%
filter(!is.na(pfx_z)) %>%
summarize(min_x = min(pfx_x), max_x = max(pfx_x),
min_z = min(pfx_z), max_z = max(pfx_z)) %>%
write.csv("Movement.csv")
rhp <- read_csv("CSVs/rhp_pitches.csv")
lhp <- read_csv("CSVs/lhp_pitches.csv")
all_data <- rbind(rhp, lhp)
all_data %>%
summarize(Mean_Top = mean(sz_top, na.rm = TRUE),
Median_Top = median(sz_top, na.rm = TRUE),
Mean_Bottom = mean(sz_bot, na.rm = TRUE),
Median_Bottom = median(sz_bot, na.rm = TRUE))
rhp %>% group_by(zone) %>% summarize(min(plate_x), max(plate_x), min(plate_z), max(plate_z)) %>% View
View(rhp)
rhp %>% filter(batter == 669261) %>% group_by(zone) %>% summarize(min(plate_x), max(plate_x), min(plate_z), max(plate_z)) %>% View
8.5/12
rhp <- rhp %>%
mutate(dist_x = plate_x/0.708333,
center = (sz_top + sz_bot) / 2,
dist_z = ifelse(plate_z >= center,
(plate_z - center) / (sz_top - center),
(plate_z - center) / (center - sz_bot)))
rhp <- rhp %>%
mutate(dist_x = plate_x/0.708333,
center = (sz_top + sz_bot) / 2,
dist_z = ifelse(plate_z >= center,
(plate_z - center) / (sz_top - center),
(plate_z - center) / (center - sz_bot)),
dist_prop = sqrt(dist_z^2 + dist_x^2))
rhp %>%
head(1000) %>%
ggplot(aes(x = plate_x, y = plate_z, color = dist_prop)) +
geom_zone() +
geom_point()
rhp %>%
head(1000) %>%
ggplot(aes(x = plate_x, y = plate_z, color = dist_prop)) +
geom_zone() +
geom_point() +
scale_color_manual(low = "white", high = "red")
rhp %>%
head(1000) %>%
ggplot(aes(x = plate_x, y = plate_z, color = dist_prop)) +
geom_zone() +
geom_point() +
scale_color_gradient(low = "white", high = "red")
rhp %>%
head(1000) %>%
ggplot(aes(x = plate_x, y = plate_z, color = dist_prop)) +
geom_zone() +
geom_point() +
scale_color_gradient(low = "white", high = "red") +
theme_dark()
summary(rhp$dist_prop)
rhp %>% filter(dist_prop > 9.5) %>% View
View(rhp)
rhp %>%
filter(batter %in% c(669261, 609280, 668804)) %>%
ggplot(aes(x = plate_x, y = plate_z, color = dist_prop)) +
geom_zone() +
geom_point() +
scale_color_gradient(low = "white", high = "red") +
theme_dark() +
facet_wrap(~ batter)
rhp %>%
filter(batter %in% c(669261, 609280, 668804)) %>%
ggplot(aes(x = plate_x, y = plate_z, color = dist_prop)) +
geom_zone() +
geom_point() +
scale_color_gradient(low = "white", high = "red") +
theme_dark() +
facet_wrap(~ batter) +
coord_fixed()
rhp %>%
filter(batter %in% c(669261, 609280, 668804)) %>%
ggplot(aes(x = plate_x, y = plate_z, color = dist_prop)) +
geom_zone() +
geom_point(alpha = 0.25) +
scale_color_gradient(low = "white", high = "red") +
theme_dark() +
facet_wrap(~ batter) +
coord_fixed()
rhp %>%
filter(batter %in% c(669261, 609280, 668804)) %>%
ggplot(aes(x = plate_x, y = plate_z, color = dist_prop)) +
geom_zone() +
geom_point(alpha = 0.4) +
scale_color_gradient(low = "white", high = "red") +
theme_dark() +
facet_wrap(~ batter) +
coord_fixed()
rhp %>%
filter(batter %in% c(592450, 514888)) %>%
filter(plate_z > 4, plate_z < 4.2) %>%
ggplot(aes(x = plate_x, y = plate_z, color = dist_prop)) +
geom_zone() +
geom_point() +
scale_color_gradient(low = "white", high = "red") +
theme_dark() +
facet_wrap(~ batter) +
coord_fixed()
rhp %>%
filter(batter %in% c(592450, 514888)) %>%
filter(plate_z > 4 | plate_z < 2.5) %>%
ggplot(aes(x = plate_x, y = plate_z, color = dist_prop)) +
geom_zone() +
geom_point() +
scale_color_gradient(low = "white", high = "red") +
theme_dark() +
facet_wrap(~ batter) +
coord_fixed()
rhp %>%
filter(batter %in% c(592450, 514888)) %>%
filter(plate_z > 4 | plate_z < 1.5) %>%
ggplot(aes(x = plate_x, y = plate_z, color = dist_prop)) +
geom_zone() +
geom_point() +
scale_color_gradient(low = "white", high = "red") +
theme_dark() +
facet_wrap(~ batter) +
coord_fixed()
rhp %>%
filter(batter %in% c(592450, 514888)) %>%
filter(plate_z > 4 | plate_z < 1.5) %>%
ggplot(aes(x = plate_x, y = plate_z, color = dist_prop)) +
geom_hline(yintercept = sz_top) +
geom_point() +
scale_color_gradient(low = "white", high = "red") +
theme_dark() +
facet_wrap(~ batter) +
coord_fixed()
rhp %>%
filter(batter %in% c(592450, 514888)) %>%
filter(plate_z > 4 | plate_z < 1.5) %>%
ggplot(aes(x = plate_x, y = plate_z, color = dist_prop)) +
geom_hline(aes(yintercept = sz_top)) +
geom_point() +
scale_color_gradient(low = "white", high = "red") +
theme_dark() +
facet_wrap(~ batter) +
coord_fixed()
rhp %>%
filter(batter %in% c(592450, 514888)) %>%
filter(zone == 1 | zone == 9) %>%
ggplot(aes(x = plate_x, y = plate_z, color = dist_prop)) +
geom_zone() +
geom_point() +
scale_color_gradient(low = "white", high = "red") +
theme_dark() +
facet_wrap(~ batter) +
coord_fixed()
rhp %>%
group_by(zone) %>%
filter(pitch_type == "SL") %>%
summarize(w = mean(whiff, na.rm = TRUE)) %>%
View
rhp %>%
group_by(zone) %>%
filter(pitch_type == "SL") %>%
summarize(w = mean(whiff, na.rm = TRUE)) %>%
geom_tile()
rhp %>%
group_by(zone) %>%
filter(pitch_type == "SL") %>%
summarize(w = mean(whiff, na.rm = TRUE)) %>% View
View(sl_whiff)
sl_whiff %>%
mutate(plate_x = round(plate_x, 1),
plate_z = round(plate_z, 1)) %>%
ggplot(aes(x = plate_x, y = plate_z, color = prediction)) +
geom_zone() +
geom_point()
sl_whiff %>%
mutate(plate_x = round(plate_x, 1),
plate_z = round(plate_z, 1)) %>%
ggplot(aes(x = plate_x, y = plate_z, color = prediction)) +
geom_zone() +
geom_point() + coord_fixed()
sl_whiff %>%
mutate(plate_x = round(plate_x, 1),
plate_z = round(plate_z, 1)) %>%
ggplot(aes(x = plate_x, y = plate_z, color = prediction), alpha = 0.1) +
geom_zone() +
geom_point() + coord_fixed()
sl_whiff %>%
mutate(plate_x = round(plate_x),
plate_z = round(plate_z)) %>%
ggplot(aes(x = plate_x, y = plate_z, color = prediction), alpha = 0.1) +
geom_zone() +
geom_point() + coord_fixed()
library(ranger)
rhp <- rhp %>%
mutate(zone = as.character(zone))
ranger(dist_prop ~ plate_z + plate_x + distance + zone,
data = rhp)
library(shiny); runApp('app test.R')
View(all_models)
all_models %>% filter(term == "spin") %>% View
all_models %>% filter(term == "spin_rate") %>% View
all_models %>% filter(term == "release_spin_rate") %>% View
runApp('app test.R')
runApp('app test.R')
