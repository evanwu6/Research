"Hard Hit Percent" = weighted.mean(hard_hit_percent, pitch_usage*pitches)) %>%
as.data.frame()
View(avgs)
View(avgs)
avgs <- arsenal %>%
group_by(pitch_name) %>%
summarize(Speed = round(weighted.mean(pitch_speed, pitch_usage*pitches), 1),
"Spin Rate" = round(weighted.mean(spin_rate, pitch_usage*pitches), 0),
"Horizontal Break (in.)" = round(weighted.mean(pitcher_break_x, pitch_usage*pitches), 1),
"Vertical Break (in.)" = round(weighted.mean(pitcher_break_z, pitch_usage*pitches), 1),
"Whiff Percent" = round(weighted.mean(whiff_percent, pitch_usage*pitches), 3),
wOBA = round(weighted.mean(wOBA, pitch_usage*pitches), 1),
"Hard Hit Percent" = round(weighted.mean(hard_hit_percent, pitch_usage*pitches), 1)) %>%
as.data.frame()
View(avgs)
avgs <- arsenal %>%
group_by(pitch_name) %>%
summarize(Speed = round(weighted.mean(pitch_speed, pitch_usage*pitches), 1),
"Spin Rate" = round(weighted.mean(spin_rate, pitch_usage*pitches), 0),
"Horizontal Break (in.)" = round(weighted.mean(pitcher_break_x, pitch_usage*pitches), 1),
"Vertical Break (in.)" = round(weighted.mean(pitcher_break_z, pitch_usage*pitches), 1),
"Whiff Percent" = round(weighted.mean(whiff_percent, pitch_usage*pitches), 1),
wOBA = round(weighted.mean(wOBA, pitch_usage*pitches), 3),
"Hard Hit Percent" = round(weighted.mean(hard_hit_percent, pitch_usage*pitches), 1)) %>%
as.data.frame()
View(avgs)
avgs <- arsenal %>%
group_by(pitch_name) %>%
summarize(Speed = round(weighted.mean(pitch_speed, pitch_usage*pitches), 1),
"Spin Rate" = round(weighted.mean(spin_rate, pitch_usage*pitches), 0),
"Horizontal Break (in.)" = round(weighted.mean(pitcher_break_x, pitch_usage*pitches), 1),
"Vertical Break (in.)" = round(weighted.mean(pitcher_break_z, pitch_usage*pitches), 1),
"Whiff Percent" = round(weighted.mean(whiff_percent, pitch_usage*pitches), 1),
wOBA = round(weighted.mean(wOBA, pitch_usage*pitches), 3),
"Hard Hit Percent" = round(weighted.mean(hard_hit_percent, pitch_usage*pitches), 1)) %>%
as.data.frame() %>%
mutate("Whiff Percent" = paste0(`Whiff Percent`, "%"))
View(avgs)
avgs <- arsenal %>%
group_by(pitch_name) %>%
summarize(Speed = round(weighted.mean(pitch_speed, pitch_usage*pitches), 1),
"Spin Rate" = round(weighted.mean(spin_rate, pitch_usage*pitches), 0),
"Horizontal Break (in.)" = round(weighted.mean(pitcher_break_x, pitch_usage*pitches), 1),
"Vertical Break (in.)" = round(weighted.mean(pitcher_break_z, pitch_usage*pitches), 1),
"Whiff Rate" = round(weighted.mean(whiff_percent, pitch_usage*pitches), 1),
wOBA = round(weighted.mean(wOBA, pitch_usage*pitches), 3),
"Hard Hit Rate" = round(weighted.mean(hard_hit_percent, pitch_usage*pitches), 1)) %>%
as.data.frame() %>%
mutate("Whiff Rate" = paste0(`Whiff Rate`, "%"),
"Hard Hit Rate" = paste0(`Hard Hit Rate`, "%"))
View(avgs)
avgs <- arsenal %>%
group_by(pitch_name) %>%
summarize(Speed = round(weighted.mean(pitch_speed, pitch_usage*pitches), 1),
"Spin Rate" = round(weighted.mean(spin_rate, pitch_usage*pitches), 0),
"Horizontal Break (in.)" = round(weighted.mean(pitcher_break_x, pitch_usage*pitches), 1),
"Vertical Break (in.)" = round(weighted.mean(pitcher_break_z, pitch_usage*pitches), 1),
wOBA = round(weighted.mean(wOBA, pitch_usage*pitches), 3),
"Whiff Rate" = round(weighted.mean(whiff_percent, pitch_usage*pitches), 1),
"Hard Hit Rate" = round(weighted.mean(hard_hit_percent, pitch_usage*pitches), 1)) %>%
as.data.frame() %>%
mutate("Whiff Rate" = paste0(`Whiff Rate`, "%"),
"Hard Hit Rate" = paste0(`Hard Hit Rate`, "%"))
View(avgs)
setwd("~/Downloads/Fall 2023/SABR Research/Research")
library(tidyverse)
library(readxl)
library(ggforce)
library(knitr)
library(forcats)
library(olsrr)
library(ranger)
library(Metrics)
library(mgcv)
library(caret)
set.seed(3630)
seasonal <- read_csv("CSVs/season_stats.csv")
pitchers <- read_csv("CSVs/pitcher_comps.csv")
arsenal <- read_csv("CSVs/arsenal.csv")
empty <- read_csv("CSVs/bases_empty.csv")
# Geom Zone (Jackie's) ####
geom_zone <- function(top = 11/3, bottom = 3/2, linecolor = "black"){
geom_rect(xmin = -.7083, xmax = .7083, ymin = bottom, ymax = top,
alpha = 0, color = linecolor, linewidth = 0.75)
}
# c(0, 0, -.25, -.5, -.25))
geom_plate <- function(pov = "pitcher"){
df <- case_when(
pov == "pitcher" ~
data.frame(x = c(-.7083, .7083, .7083 ,0, -.7083), y = c(0, 0, .25, .5, .25)),
pov == "catcher" ~
data.frame(x = c(-.7083, .7083, .7083 ,0, -.7083), y = c(0, 0, -.25, -.5, -.25))
)
g <- geom_polygon(data = df, aes(x = x, y = y), fill = "white", color = "black", linewidth = 1.25)
g
}
# Strike / Ball
pitchers2 <- pitchers %>%
mutate(zone = ifelse(plate_z >= (sz_bot - 1.45/12) &
plate_z <= (sz_top + 1.45/12) &
abs(plate_x) <= (17+1.45)/12/2 ,
"1", "0"))
# Creating distance from center variable
pitchers2 <- pitchers2 %>%
filter(pitch_type != "Pitch Out",
!is.na(pitch_type)) %>%
mutate(
loc_x = abs(plate_x),
loc_y = abs(plate_z - (sz_top + sz_bot) / 2),
dist = sqrt(loc_x^2 + loc_y^2))
# Creating speed change variable
pitchers2 <- pitchers2 %>%
mutate(speed_change = pitch_speed - mean(pitch_speed),
.by = c(pitch_type, game_date, player_id) )
# Creating break change variable
pitchers2 <- pitchers2 %>%
mutate(pfx_total = sqrt(pfx_x^2 + pfx_z^2)) %>%
mutate(break_change = pfx_total - mean(pfx_total),
.by = c(pitch_type, game_date, player_id) )
# Distance from Center
avg_dist <- pitchers2 %>%
filter(zone == 1) %>%
summarize(mean(dist))
avg_dist <- avg_dist$`mean(dist)`[1]
pitchers2 %>%
ggplot(aes(x = dist)) +
geom_histogram(color = "white", binwidth = 0.1)+
geom_vline(xintercept = avg_dist, color = "green") +
labs(x = "Distance from Center (ft)",
title = "Distance from Center Distribution")
# Delta Break
pitchers2 %>%
ggplot(aes(x = break_change*12)) +
geom_histogram(color = "white", binwidth = 0.5) +
labs(x = "Change in Break (in.)",
title = "Change in Break Distribution",
subtitle = "Change computed versus the average of a given pitch type for a given date.")
# Delta Speed
pitchers2 %>%
ggplot(aes(x = speed_change), alpha = 0.5) +
geom_histogram(color = "white", binwidth = 0.25) +
labs(x = "Change in Speed (mph)",
title = "Change in Speed Distribution",
subtitle = "Change computed versus the average of a given pitch type for a given date.")
###########
# Distance vs. RE
pitchers2 %>%
ggplot(aes(x = dist, y = run_exp_added, color = pitch_name)) +
geom_point(alpha = 0.25) +
geom_smooth(se = FALSE, color = "black") +
facet_wrap(~pitch_name) +
labs(x = "Distance from Center (ft)",
title = "Run Expectancy by Distance from Center")
# Delta Break vs. RE
pitchers2 %>%
ggplot(aes(x = break_change, y = run_exp_added, color = pitch_name)) +
geom_point(alpha = 0.25) +
geom_smooth(se = FALSE, color = "black") +
facet_wrap(~pitch_name) +
labs(x = "Change in Break (in.)",
title = "Run Expectancy by Change in Break")
# Delta Speed vs. RE
pitchers2 %>%
ggplot(aes(x = speed_change, y = run_exp_added, color = pitch_name)) +
geom_point(alpha = 0.25) +
geom_smooth(se = FALSE, color = "black") +
facet_wrap(~pitch_name) +
labs(x = "Change in Speed (mph)",
title = "Run Expectancy by Change in Speed")
# Model?
model <- lm(run_exp_added ~ dist + speed_change + break_change,
data = pitchers2)
preds <- pitchers2 %>%
mutate(predicted = predict(model, pitchers2)) %>%
rename(observed = run_exp_added) %>%
select(ID, zone, pitch_type, observed, predicted) %>%
filter(pitch_type != "PO")
acc <- preds %>%
ggplot(aes(x = observed, y = predicted)) +
geom_point(alpha = 0.5) +
geom_smooth()
acc
acc +
facet_wrap(~ pitch_type)
acc +
facet_wrap(~ ID)
data_ff <- pitchers2 %>%
filter(pitch_type == "FF",
!is.na(break_change))
model_ff <- ranger(run_exp_added ~ dist + speed_change + break_change,
data = data_ff, mtry = 2)
preds_ff <- data_ff %>%
mutate(predicted = predict(model_ff, data_ff)$predictions) %>%
rename(observed = run_exp_added) %>%
select(ID, zone, pitch_type, observed, predicted) %>%
filter(pitch_type != "PO")
preds_ff %>%
ggplot(aes(x = observed, y = predicted)) +
geom_point() +
geom_smooth() +
labs(title = "Fastball RF Model",
caption = paste0("RMSE: ", round(rmse(preds_ff$observed, preds_ff$predicted), 4)))
preds_ff %>%
filter(!is.na(observed),
!is.na(predicted)) %>%
with(cor(observed, predicted))
data_si <- pitchers2 %>%
filter(pitch_type == "SI",
!is.na(break_change))
model_si <- ranger(run_exp_added ~ dist + speed_change + break_change,
data = data_si, mtry = 2)
preds_si <- data_si %>%
mutate(predicted = predict(model_si, data_si)$predictions) %>%
rename(observed = run_exp_added) %>%
select(ID, zone, pitch_type, observed, predicted) %>%
filter(pitch_type != "PO")
preds_si %>%
ggplot(aes(x = observed, y = predicted)) +
geom_point() +
geom_smooth() +
labs(title = "Sinker RF Model",
caption = paste0("RMSE: ", round(rmse(preds_si$observed, preds_si$predicted), 4)))
preds_si %>%
filter(!is.na(observed),
!is.na(predicted)) %>%
with(cor(observed, predicted))
data_ch <- pitchers2 %>%
filter(pitch_type == "CH",
!is.na(break_change))
model_ch <- ranger(run_exp_added ~ dist + speed_change + break_change,
data = data_ch, mtry = 2)
preds_ch <- data_ch %>%
mutate(predicted = predict(model_ch, data_ch)$predictions) %>%
rename(observed = run_exp_added) %>%
select(ID, zone, pitch_type, observed, predicted) %>%
filter(pitch_type != "PO")
preds_ch %>%
ggplot(aes(x = observed, y = predicted)) +
geom_point() +
geom_smooth() +
labs(title = "Change-Up RF Model",
caption = paste0("RMSE: ", round(rmse(preds_ch$observed, preds_ch$predicted), 4)))
preds_ch %>%
filter(!is.na(observed),
!is.na(predicted)) %>%
with(cor(observed, predicted))
data_sl <- pitchers2 %>%
filter(pitch_type == "SL",
!is.na(break_change))
model_sl <- ranger(run_exp_added ~ dist + speed_change + break_change,
data = data_sl, mtry = 2)
preds_sl <- data_sl %>%
mutate(predicted = predict(model_sl, data_sl)$predictions) %>%
rename(observed = run_exp_added) %>%
select(ID, zone, pitch_type, observed, predicted) %>%
filter(pitch_type != "PO")
preds_sl %>%
ggplot(aes(x = observed, y = predicted)) +
geom_point() +
geom_smooth() +
labs(title = "Slider RF Model",
caption = paste0("RMSE: ", round(rmse(preds_sl$observed, preds_sl$predicted), 4)))
preds_sl %>%
filter(!is.na(observed),
!is.na(predicted)) %>%
with(cor(observed, predicted))
#
# Actmodel <- train(run_exp_added ~ dist + speed_change + break_change,
#                   data = data_sl, method = "ranger",
#                   trControl = trainControl(method = "cv", number = 10, verboseIter = TRUE), preProcess = c("knnImpute"))
# plot(Actmodel$finalModel$forest)
empty %>%
ggplot(aes(x = run_exp_added)) +
geom_histogram(color = "white", binwidth = 0.025) +
labs(x = "Run Expectancy Added",
title = "RE Added for Bases Empty Pitches")
# Use the train function to create and cross-validate the ranger model
results <- train(
run_exp_added ~ dist + speed_change + break_change,
data = data_ff,
method = "ranger",
trControl = trainControl(method = "cv", number = 5),
mtry = 2
)
# Use the train function to create and cross-validate the ranger model
results <- train(
run_exp_added ~ dist + speed_change + break_change,
data = data_ff,
method = "ranger",
trControl = trainControl(method = "cv", number = 5))
View(results)
hi <- results$pred
preds_ff <- data_ff %>%
mutate(predicted = predict(results, data_ff)$predictions) %>%
rename(observed = run_exp_added) %>%
select(ID, zone, pitch_type, observed, predicted) %>%
filter(pitch_type != "PO")
View(preds_ff)
preds_ff %>%
ggplot(aes(x = observed, y = predicted)) +
geom_point() +
geom_smooth() +
labs(title = "Fastball RF Model",
caption = paste0("RMSE: ", round(rmse(preds_ff$observed, preds_ff$predicted), 4)))
predict(results) %>% View
predict(results) %>% as.data.frame() %>% View
preds_ff2 <- cbind(pred_ff, predict(results))
preds_ff2 <- cbind(preds_ff, predict(results))
preds_ff2 <- cbind(data_ff, predict(results))
View(preds_ff2)
preds_ff2 <- cbind(data_ff, predict(results))%>%
rename(observed = run_exp_added,
predicted = "predict(results)") %>%
select(ID, zone, pitch_type, observed, predicted)
View(preds_ff2)
data_ff <- pitchers2 %>%
filter(pitch_type == "FF",
!is.na(break_change))
model_ff <- train(
run_exp_added ~ dist + speed_change + break_change,
data = data_ff,
method = "ranger",
trControl = trainControl(method = "cv", number = 5))
model_ff <- train(
run_exp_added ~ dist + speed_change + break_change,
data = data_ff,
method = "ranger",
trControl = trainControl(method = "cv", number = 5))
preds_ff <- cbind(data_ff, predict(model_ff)) %>%
as.data.frame() %>%
rename(observed = run_exp_added,
predicted = "predict(model_ff)") %>%
select(ID, zone, pitch_type, observed, predicted) %>%
filter(pitch_type != "PO")
preds_ff %>%
ggplot(aes(x = observed, y = predicted)) +
geom_point() +
geom_smooth() +
labs(title = "Fastball RF Model",
caption = paste0("RMSE: ", round(rmse(preds_ff$observed, preds_ff$predicted), 4)))
preds_ff %>%
ggplot(aes(x = observed, y = predicted)) +
geom_point() +
geom_smooth() +
labs(title = "Fastball RF Model",
caption = paste0("RMSE: ", round(rmse(preds_ff$observed, preds_ff$predicted), 4)))
View(data_ff)
View(data_ff)
View(data_ff)
preds_ff %>%
ggplot(aes(x = observed, y = predicted)) +
geom_point() +
geom_smooth() +
geom_abline(slope = 1, intercept = 0) +
labs(title = "Fastball RF Model",
caption = paste0("RMSE: ", round(rmse(preds_ff$observed, preds_ff$predicted), 4)))
preds_ff %>%
ggplot(aes(x = observed, y = predicted)) +
geom_point() +
geom_smooth() +
geom_abline(slope = 1, intercept = 0) +
coord_fixed() +
labs(title = "Fastball RF Model",
caption = paste0("RMSE: ", round(rmse(preds_ff$observed, preds_ff$predicted), 4)))
View(model_ff)
View(model_ch)
View(pitchers2)
View(data_ff)
View(pitchers2)
pitchers <- read_csv(paste0("Pitch Level Data/Pitcher Comps 2022/", files[1]))
# Pitch-by-Pitch Data (9 Pitchers) ####
files <- list.files("Pitch Level Data/Pitcher Comps 2022/")
pitchers <- read_csv(paste0("Pitch Level Data/Pitcher Comps 2022/", files[1]))
View(pitchers)
for(i in 2:length(files)) {
pitchers <- rbind(pitchers,
read_csv(paste0("Pitch Level Data/Pitcher Comps 2022/",files[i])))
}
add <- stats_2022 %>%
select(player_id, woba)
pitchers %>% filter(description == "hit_into_play") %>% View
pitchers %>% filter(description == "hit_into_play", str_detect(des, "flies out")) %>% View
View(pitchers2)
View(pitchers2)
pitchers <- pitchers %>%
left_join(add, by = c("pitcher...8" = "player_id")) %>%
mutate(ID = case_when(woba > 0.330 ~ "Bad",
woba < 0.280 ~ "Great",
TRUE ~ "Decent"),
win_exp_added = case_when(inning_topbot == "Bot"  ~ -delta_home_win_exp,
inning_topbot == "Top"  ~ delta_home_win_exp),
run_exp_added = -delta_run_exp,
ra_on_play = post_bat_score - bat_score) %>%
rename(player_id = pitcher...8,
hitter = stand,
pitch_speed = release_speed) %>%
select(ID, player_name, player_id, game_date, pitch_type, pitch_name,
pitch_speed, spin_axis, pfx_x:plate_z, ra_on_play,
release_pos_x, release_pos_z, bb_type:strikes, pitch_number,
hitter, home_team:type, outs_when_up, inning, ra_on_play,
run_exp_added, win_exp_added,
sz_top, sz_bot, hit_distance_sc:release_extension,
estimated_ba_using_speedangle:woba_value, at_bat_number,
description, events, des, on_3b:on_1b, outs_when_up) %>%
mutate(pitch_name = str_replace(pitch_name, "4-Seam Fastball", "4-Seam"))
pitchers <- read_csv(paste0("Pitch Level Data/Pitcher Comps 2022/", files[1]))
for(i in 2:length(files)) {
pitchers <- rbind(pitchers,
read_csv(paste0("Pitch Level Data/Pitcher Comps 2022/",files[i])))
}
add <- stats_2022 %>%
select(player_id, woba)
# Overall Numbers for Pitchers
# URL: https://baseballsavant.mlb.com/leaderboard/custom?year=2022&type=pitcher&filter=&sort=4&sortDir=asc&min=100&selections=p_game,p_formatted_ip,pa,hit,home_run,strikeout,walk,k_percent,bb_percent,batting_avg,slg_percent,on_base_percent,on_base_plus_slg,babip,p_earned_run,p_win,p_loss,p_era,xba,xslg,woba,xwoba,xobp,wobacon,xwobacon,exit_velocity_avg,launch_angle_avg,sweet_spot_percent,barrel_batted_rate,&chart=false&x=xba&y=xba&r=no&chartType=beeswarm
# Downloaded: September 29, 2023
stats_2022 <- read_csv("Pitcher Seasonal Data/2022_stats.csv")
stats_2022 <- stats_2022 %>%
rename(Name = `last_name, first_name`,
IP = p_formatted_ip,
G = p_game,
AVG = batting_avg,
SLG = slg_percent,
OBP = on_base_percent,
OPS = on_base_plus_slg,
ER = p_earned_run,
wins = p_win,
losses = p_loss,
ERA = p_era,
ev_avg = exit_velocity_avg,
la_avg = launch_angle_avg,
PA = pa,
HR = home_run,
H = hit,
K = strikeout,
BB = walk) %>%
select(-...33)
add <- stats_2022 %>%
select(player_id, woba)
pitchers <- pitchers %>%
left_join(add, by = c("pitcher...8" = "player_id")) %>%
mutate(ID = case_when(woba > 0.330 ~ "Bad",
woba < 0.280 ~ "Great",
TRUE ~ "Decent"),
win_exp_added = case_when(inning_topbot == "Bot"  ~ -delta_home_win_exp,
inning_topbot == "Top"  ~ delta_home_win_exp),
run_exp_added = -delta_run_exp,
ra_on_play = post_bat_score - bat_score) %>%
rename(player_id = pitcher...8,
hitter = stand,
pitch_speed = release_speed) %>%
select(ID, player_name, player_id, game_date, pitch_type, pitch_name,
pitch_speed, spin_axis, pfx_x:plate_z, ra_on_play,
release_pos_x, release_pos_z, bb_type:strikes, pitch_number,
hitter, home_team:type, outs_when_up, inning, ra_on_play,
run_exp_added, win_exp_added,
sz_top, sz_bot, hit_distance_sc:release_extension,
estimated_ba_using_speedangle:woba_value, at_bat_number,
description, events, des, on_3b:on_1b, outs_when_up) %>%
mutate(pitch_name = str_replace(pitch_name, "4-Seam Fastball", "4-Seam"))
View(pitchers)
# Pitch-by-Pitch "Pitchers" CSV
write.csv(pitchers, "pitcher_comps.csv")
pitchers <- read_csv("CSVs/pitcher_comps.csv")
View(pitchers)
whiff <- pitchers %>%
mutate(whiff = description == "swinging_strike",
whiff = as.character(whiff))
whiff %>%
ggplot(aes(x = whiff, y = pitch_speed)) +
geom_violin()
View(whiff)
whiff %>%
ggplot(aes(x = whiff, y = pitch_speed)) +
geom_violin() +
geom_boxplot(alpha = 0.5)
whiff %>%
filter(pitch_type == "FF") +
ggplot(aes(x = whiff, y = pitch_speed)) +
geom_violin() +
geom_boxplot(alpha = 0.5)
whiff %>%
filter(pitch_type == "FF") %>%
ggplot(aes(x = whiff, y = pitch_speed)) +
geom_violin() +
geom_boxplot(alpha = 0.5)
whiff %>%
filter(pitch_type == "FF") %>%
ggplot(aes(x = whiff, y = pitch_speed)) +
geom_violin() +
# geom_boxplot(alpha = 0.5) +
NULL
whiff %>%
filter(pitch_type == "FF") %>%
ggplot(aes(x = whiff, y = pitch_speed)) +
geom_violin() +
geom_boxplot(alpha = 0.5) +
facet_wrap(~ player_name) +
NULL
whiff %>%
filter(pitch_type == "FF") %>%
ggplot(aes(x = whiff, y = pitch_speed)) +
geom_violin() +
geom_boxplot(alpha = 0.5) +
facet_wrap(~ inning) +
NULL
whiff %>%
filter(pitch_type == "FF") %>%
ggplot(aes(x = whiff, y = pitch_speed)) +
geom_violin() +
geom_boxplot(alpha = 0.5) +
# facet_wrap(~ inning) +
NULL
